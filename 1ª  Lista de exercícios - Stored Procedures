/* 1ª  Lista de exercícios - Stored Procedures*/
/* Marcus Vinicius Soares Correia*/

/* 
1) Crie (em uma única stored procedures) opções para inserção, atualização e deleção de clientes.
Defina os parâmetros de forma adequada para cada operação, e valide os campos que são chaves
estrangeiras, fazendo os devidos tratamentos e envio de mensagens de erros.
*/

desc cliente;

drop procedure sp_crud_cliente;
delimiter $$
create procedure sp_crud_cliente(	p_opcao varchar(10),
									p_clicodigo int, 
                                    p_clisexo char(1),
                                    p_clirendamensal double(6,2),
                                    p_clinome varchar(70),
                                    p_clibaicodigo int,
                                    p_clifone varchar(10),
                                    p_cliestcodigo int,
                                    p_clidtcadastro date,
                                    p_clidtdesativacao date)
begin

if p_opcao = 'insert' then
	if not exists (select 'validacao' from bairro where baicodigo = p_clibaicodigo) then
		select 'O codigo de bairro escolhido nao existe' resposta;
	elseif not exists (select 'validacao' from estadocivil where estcodigo = p_cliestcodigo) then
		select 'O codigo de estado civil escolhido nao existe' resposta;
	elseif p_clisexo not in ('m', 'f') then 
		select 'O sexo escolhido nao é "m" ou "f"' resposta;
	else
		insert into cliente (clisexo, clirendamensal, clinome, clibaicodigo, clifone, cliestcodigo, clidtcadastro, clidtdesativacao)
		values (p_clisexo, p_clirendamensal, p_clinome, p_clibaicodigo, p_clifone, p_cliestcodigo, p_clidtcadastro, p_clidtdesativacao);
	end if;
    
elseif p_opcao = 'update' then
	if not exists (select 'validacao' from cliente where clicodigo = p_clicodigo) then
		select 'O codigo de cliente escolhido nao existe' resposta;
	elseif not exists (select 'validacao' from bairro where baicodigo = p_clibaicodigo) then
		select 'O codigo de bairro escolhido nao existe' resposta;
	elseif not exists (select 'validacao' from estadocivil where estcodigo = p_cliestcodigo) then
		select 'O codigo de estado civil escolhido nao existe' resposta;
	elseif p_clisexo not in ('m', 'f') then 
		select 'O sexo escolhido nao é "m" ou "f"' resposta;
	else
		update cliente
        set clisexo = p_clisexo,
            clirendamensal = p_clirendamensal,
            clinome = p_clinome,
            clibaicodigo = p_clibaicodigo,
            clifone = p_clifone,
            cliestcodigo = p_cliestcodigo,
            clidtcadastro = p_clidtcadastro,
            clidtdesativacao = p_clidtdesativacao
		where clicodigo = p_clicodigo; 
	end if;
    
elseif p_opcao = 'delete' then
	if not exists (select 'validacao' from cliente where clicodigo = p_clicodigo) then
		select 'O codigo de cliente escolhido nao existe' resposta;
	elseif exists (select 'validacao' from venda where venclicodigo = p_clicodigo) then 
		select 'O codigo de cliente possui venda(s) vinculada(s)' resposta;
	else
		delete from cliente where clicodigo = p_clicodigo;
	end if;
end if;
end$$
delimiter ;

-- p_opcao, p_clicodigo, p_sexo, p_clirenda, p_clinome, p_clibaicodigo, p_clifone, p_cliestcodigo, p_clidtcadastro, p_clidtdesativacao 
call sp_crud_cliente('insert','10','f','10','teste crud','1','1','1','2025-04-04', null);

select * from cliente where clinome = 'teste crud';
select * from cliente inner join venda on venclicodigo = clicodigo;

/*
2) Mostre o total de vendas por sexo de clientes e forma de pagamento.
*/

desc cliente;
desc formapagamento;

select count(*)
from venda 

inner join formapagamento on fpcodigo = venfpcodigo
inner join cliente on clicodigo = venclicodigo

where clisexo = 'm' and fpdescricao = 'pix';

drop procedure sp_vendas_sexo_pagamento;
delimiter $$
create procedure sp_vendas_sexo_pagamento(p_sexo char(1), p_fpagamento varchar(60))
begin 
	declare aux int;
	if p_sexo not in ('m','f') then
		select concat('Sexo "', p_sexo,'" inválido') resposta;
	else 
		select count(*) into aux from formapagamento 
        where fpdescricao = p_fpagamento;
        
        if aux = 0 then
			select concat('Forma de pagamento "', p_fpagamento,'" inválida') resposta;
		else
			select count(*) 'Total de vendas'
			from venda 
			
			inner join formapagamento on fpcodigo = venfpcodigo
			inner join cliente on clicodigo = venclicodigo
			
			where clisexo = p_sexo and fpdescricao = p_fpagamento;
		end if;
	end if;
	
end$$
delimiter ;

call sp_vendas_sexo_pagamento('f','dinheiro');

/*
3) Mostre o nome e saldo do(s) produto(s) mais vendido de um determinado grupo de produtos.
*/

-- Numero de vendas por grupo
select sum(itvqtde) 
from produto
inner join itemvenda on  itvprocodigo = procodigo
inner join grupoproduto on grpcodigo = progrpcodigo
where grpdescricao = 'foto'
group by pronome;

-- Maior numero de vendas
select max(maior)
from (select sum(itvqtde) as maior
		from produto
		inner join itemvenda on  itvprocodigo = procodigo
		inner join grupoproduto on grpcodigo = progrpcodigo
		where grpdescricao = 'foto'
		group by pronome
) quantidade;

select pronome, prosaldo 
from produto
inner join itemvenda on  itvprocodigo = procodigo
inner join grupoproduto on grpcodigo = progrpcodigo
where grpdescricao = 'foto'
group by pronome, prosaldo
having sum(itvqtde) = (select max(maior)
						from (
							select sum(itv.itvqtde) as maior 
                            from produto pro
                            inner join itemvenda itv on itv.itvprocodigo = pro.procodigo
                            inner join grupoproduto grp on grp.grpcodigo = pro.progrpcodigo
                            where grp.grpdescricao = 'foto'
                            group by pro.pronome
                            ) vendas
);

desc grupoproduto;

drop procedure sp_saldo_produtos_mais_vendidos_grupo;
delimiter $$
create procedure sp_saldo_produtos_mais_vendidos_grupo(p_grupo varchar(40))
begin 
	declare aux int;
    
    select count(*) into aux 
    from grupoproduto
    where grpdescricao = p_grupo;
    
    if aux = 0 then
		select concat('Grupo "', p_grupo, '" invalido') resposta;
	else
		select pronome, prosaldo 
		from produto
		inner join itemvenda on  itvprocodigo = procodigo
		inner join grupoproduto on grpcodigo = progrpcodigo
		where grpdescricao = p_grupo
		group by pronome, prosaldo
		having sum(itvqtde) = (select max(maior)
								from (
									select sum(itv.itvqtde) as maior 
									from produto pro
									inner join itemvenda itv on itv.itvprocodigo = pro.procodigo
									inner join grupoproduto grp on grp.grpcodigo = pro.progrpcodigo
									where grp.grpdescricao = p_grupo
									group by pro.pronome
									) vendas);
	end if;
	
end$$
delimiter ;

call sp_saldo_produtos_mais_vendidos_grupo('fot');

/*
4) Mostre o nome e saldo do(s) produto(s) menos vendido para clientes de um determinado sexo e
de um estado civil.
*/

-- Total de venda dos produtos por sexo e estado civil
select pronome ,sum(itvqtde) as menor
from produto
inner join itemvenda on  itvprocodigo = procodigo
inner join venda on vencodigo = itvvencodigo
inner join cliente on clicodigo = venclicodigo
inner join estadocivil on estcodigo = cliestcodigo
where estdescricao = 'casado' and clisexo = 'f'
group by pronome;

-- Menor numero de vendas
select min(menor)
from (select sum(itvqtde) as menor
		from produto
		inner join itemvenda on  itvprocodigo = procodigo
		inner join venda on vencodigo = itvvencodigo
		inner join cliente on clicodigo = venclicodigo
		inner join estadocivil on estcodigo = cliestcodigo
		where estdescricao = 'casado' and clisexo = 'm'
		group by pronome
) menor;

select pronome, prosaldo 
from produto
inner join itemvenda on  itvprocodigo = procodigo
inner join venda on vencodigo = itvvencodigo
inner join cliente on clicodigo = venclicodigo
inner join estadocivil on estcodigo = cliestcodigo
where estdescricao = 'casado' and clisexo = 'f'
group by pronome, prosaldo
having sum(itvqtde) = (select min(menor)
						from (
							select sum(itv.itvqtde) as menor 
                            from produto pro
                            inner join itemvenda itv on itv.itvprocodigo = pro.procodigo
                            inner join venda ven on ven.vencodigo = itvvencodigo
							inner join cliente cli on cli.clicodigo = ven.venclicodigo
							inner join estadocivil est on est.estcodigo = cli.cliestcodigo
							where est.estdescricao = 'casado' and cli.clisexo = 'f'
                            group by pro.pronome
                            ) menor
);

desc estadocivil;

drop procedure sp_produtos_menos_vendidos_sexo_estcivil;
delimiter $$
create procedure sp_produtos_menos_vendidos_sexo_estcivil(p_sexo char(1), p_estcivil varchar(40))
begin
	declare aux int;
    
    if p_sexo in ('m','f') then 
		select count(*) into aux
        from estadocivil
        where estdescricao = p_estcivil;
		
        if aux = 0 then 
			select concat('Estado civil "', p_estcivil,'" inválido') resposta;
		else
			select pronome, prosaldo 
			from produto
			inner join itemvenda on  itvprocodigo = procodigo
			inner join venda on vencodigo = itvvencodigo
			inner join cliente on clicodigo = venclicodigo
			inner join estadocivil on estcodigo = cliestcodigo
			where estdescricao = p_estcivil and clisexo = p_sexo
			group by pronome, prosaldo
			having sum(itvqtde) = (select min(menor)
									from (
										select sum(itv.itvqtde) as menor 
										from produto pro
										inner join itemvenda itv on itv.itvprocodigo = pro.procodigo
										inner join venda ven on ven.vencodigo = itvvencodigo
										inner join cliente cli on cli.clicodigo = ven.venclicodigo
										inner join estadocivil est on est.estcodigo = cli.cliestcodigo
										where est.estdescricao = p_estcivil and cli.clisexo = p_sexo
										group by pro.pronome
										) menor
			);
		end if;
	else
		select concat('Sexo "', p_sexo, '" inválido') resposta;
	end if;
end$$
delimiter ;

call sp_produtos_menos_vendidos_sexo_estcivil('f', 'casado');

/*
5) Mostre os nomes dos clientes que tenham gerado mais de uma venda e que tenham os nomes
iniciando com determinada letra.
*/

-- gerado mais de uma venda por letra
select clinome, count(vencodigo)
from cliente
inner join venda on venclicodigo = clicodigo
group by clinome
having  count(vencodigo) > 0 and left(clinome, 1) = 'b';

select clinome from cliente
where left(clinome, 1) = 'b';

drop procedure sp_cliente_vendas_por_letra;
delimiter $$
create procedure sp_cliente_vendas_por_letra(p_inicial char (1))
begin
	declare aux1 int default 0;
    declare aux2 int default 0;
    
    select count(clinome) into aux1 from cliente
	where left(clinome, 1) = p_inicial; 
    
    if aux1 = 0 then
		select 'Nao exite clientes com essa inicial' resposta;
	else
		select count(*) into aux2 from (select clinome, count(vencodigo)
										from cliente
										inner join venda on venclicodigo = clicodigo
										group by clinome
										having  count(vencodigo) > 1 and left(clinome, 1) = p_inicial
                                        ) teste;
		if aux2 = 0 then
			select 'Nao exite clientes com essa inicial que possuam mais de duas vendas' resposta;
		else
			select clinome cliente, count(vencodigo) vendas
			from cliente
			inner join venda on venclicodigo = clicodigo
			group by clinome
			having  count(vencodigo) > 1 and left(clinome, 1) = p_inicial;
		end if;
	end if;
end$$
delimiter ;

call sp_cliente_vendas_por_letra('i');

/*
6) Mostre a maior renda de cliente para uma zona.
*/

select clinome, clirendamensal, zonnome
from cliente
inner join bairro on baicodigo = clibaicodigo
inner join zona on zoncodigo = baizoncodigo
where zonnome = 'oeste';


-- maior renda de uma zona
select distinct(clirendamensal) as 'Maior renda da zona '
from cliente
inner join bairro on baicodigo = clibaicodigo
inner join zona on zoncodigo = baizoncodigo
where zonnome = 'oeste' and clirendamensal =(select max(cli.clirendamensal)
										from cliente cli
                                        inner join bairro bai on bai.baicodigo = cli.clibaicodigo
										inner join zona zon on zon.zoncodigo = bai.baizoncodigo 
                                        where zon.zonnome = 'oeste');
                                     
desc zona;

drop procedure sp_maior_renda_zona;
delimiter $$
create procedure sp_maior_renda_zona(p_zona varchar(15))
begin
	declare aux int;
    
    select count(*) into aux
    from zona
    where zonnome = p_zona;
    
    if aux = 0 then
		select concat('Zona "', p_zona,'" inválida');
	else
		select distinct(clirendamensal) as 'Maior renda da zona '
		from cliente
		inner join bairro on baicodigo = clibaicodigo
		inner join zona on zoncodigo = baizoncodigo
		where zonnome = p_zona and clirendamensal =(select max(cli.clirendamensal)
												from cliente cli
												inner join bairro bai on bai.baicodigo = cli.clibaicodigo
												inner join zona zon on zon.zoncodigo = bai.baizoncodigo 
												where zon.zonnome = p_zona);
	end if;
end$$
delimiter ;

call sp_maior_renda_zona('oeste');

/*
7) Para cada cliente, mostre seu nome e a data da primeira venda realizada.
*/

select * from venda
right join cliente on clicodigo = venclicodigo;

select clinome, vendata 
from cliente
inner join venda on venclicodigo = clicodigo;

-- primeira venda por cliente
select clinome, min(vendata)
from cliente
inner join venda on venclicodigo = clicodigo
group by clinome;

select count(*)
from cliente
where clinome like 'EDMAR%';

desc cliente;

drop procedure sp_primeira_venda_por_cliente;
delimiter $$
create procedure sp_primeira_venda_por_cliente(p_nome varchar(70))
begin
	declare aux int;
    declare aux1 int;
    
    select count(*) into aux 
    from cliente
    where clinome like concat(p_nome, '%');
    
    if aux = 0 then
		select 'Nao possui clientes com esse nome' resposta;
	else
		select count(*) into aux1 
		from cliente
        inner join venda on venclicodigo = clicodigo
		where clinome like concat(p_nome, '%');
        
        if aux1 = 0 then 
			select 'O cliente escolhido nao gerou vendas' resposta;
		else
			select clinome nome, min(vendata) 'Data primeira venda'
			from cliente
			inner join venda on venclicodigo = clicodigo
			group by clinome
            having clinome like concat(p_nome, '%');
		end if;
	end if;
end$$
delimiter ;

call sp_primeira_venda_por_cliente('edmar');

/*
8) Mostre os nomes e custos dos produtos ativos dos grupos informática ou foto, mostrando em
primeiro lugar os com maior valor.
*/

select * from grupoproduto;

select * 
from produto
inner join grupoproduto on grpcodigo = progrpcodigo
where proativo = '1' && grpdescricao = 'foto'
or proativo = '1' && grpdescricao = 'informatica';

desc grupoproduto;

drop procedure sp_produtos_ativos_por_grupo;
delimiter $$
create procedure sp_produtos_ativos_por_grupo(p_grupo varchar(40))
begin
	declare aux int;
    
    select count(*) into aux 
    from grupoproduto
    where grpdescricao = p_grupo;
    
    if aux = 0 then 
		select concat('O grupo "', p_grupo, '" é inválido') resposta;
	else
		if p_grupo not in ('informatica', 'foto') then
			select 'O grupo informado nao é "FOTO" ou "INFORMATICA"' resposta;
		else
			select pronome produto, proativo, procusto custo 
			from produto
            
			inner join grupoproduto on grpcodigo = progrpcodigo
            
			where proativo = '1' and grpdescricao = p_grupo
            order by procusto desc;
        end if;
    end if;
end$$
delimiter ;

call sp_produtos_ativos_por_grupo('MOVEIS');

/*
9) Mostre os nomes dos funcionários não demitidos que venderam produtos para clientes da zona leste
ou oeste.
*/

select distinct(funnome) 
from funcionario
inner join venda on venfuncodigo = funcodigo
inner join cliente on clicodigo = venclicodigo
inner join bairro on baicodigo = clibaicodigo
inner join zona on zoncodigo = baizoncodigo
where zonnome = 'leste' and fundtdem is null;

desc zona;

drop procedure sp_funcionarios_venderam_clientes_zona;
delimiter $$
create procedure sp_funcionarios_venderam_clientes_zona(p_zona varchar(15))
begin
	declare aux int;
    
    select count(*) into aux 
    from zona
    where zonnome = p_zona;
    
    if aux = 0 then 
		select concat('a zona "', p_zona, '" é inválida') resposta;
	else
		if p_zona not in ('leste', 'oeste') then
			select 'A zona informada nao é "LESTE" ou "OESTE"' resposta;
		else
			select distinct(funnome) funcionario 
			from funcionario
			inner join venda on venfuncodigo = funcodigo
			inner join cliente on clicodigo = venclicodigo
			inner join bairro on baicodigo = clibaicodigo
			inner join zona on zoncodigo = baizoncodigo
			where zonnome = p_zona and fundtdem is null
            order by funnome asc;
        end if;
    end if;
end$$
delimiter ;

call sp_funcionarios_venderam_clientes_zona('norte');

/*
10) Mostre quantos produtos dos grupos "informática" e "eletroeletrônico" foram vendidos para
clientes do sexo masculino, casadas ou divorciadas e da zona norte;
*/

select * from grupoproduto;

select grpdescricao, sum(itvqtde) 'quantidade vendida'
from produto
inner join grupoproduto on grpcodigo = progrpcodigo
inner join itemvenda on itvprocodigo = procodigo
inner join venda on vencodigo = itvvencodigo
inner join cliente on clicodigo = venclicodigo
inner join estadocivil on estcodigo = cliestcodigo
inner join bairro on baicodigo = clibaicodigo
inner join zona on zoncodigo = baizoncodigo
where grpdescricao in ('ELETRO-ELETRONICOS', 'informatica')
and clisexo = 'm'
and estdescricao in ('casado','divorciado')
and zonnome = 'norte'
group by grpdescricao;

desc grupoproduto;

drop procedure sp_quantidade_produtos_grupo_vendidos_sexo_estcivil_zona;
delimiter $$
create procedure sp_quantidade_produtos_grupo_vendidos_sexo_estcivil_zona(p_grupo varchar(40))
begin
	declare aux int;
    
    select count(*) into aux 
    from grupoproduto
    where grpdescricao = p_grupo;
    
    if aux = 0 then
		select concat('Grupo "', p_grupo, '" invalido') resposta;
	else
		if p_grupo not in ('ELETRO-ELETRONICOS', 'informatica') then
			select 'O grupo selecionado nao é "ELETRO-ELETRONICOS" ou "informatica"' resposta;
		else 
			select grpdescricao, sum(itvqtde) 'quantidade vendida'
			from produto
			inner join grupoproduto on grpcodigo = progrpcodigo
			inner join itemvenda on itvprocodigo = procodigo
			inner join venda on vencodigo = itvvencodigo
			inner join cliente on clicodigo = venclicodigo
			inner join estadocivil on estcodigo = cliestcodigo
			inner join bairro on baicodigo = clibaicodigo
			inner join zona on zoncodigo = baizoncodigo
			where grpdescricao = p_grupo
			and clisexo = 'm'
			and estdescricao in ('casado','divorciado')
			and zonnome = 'norte'
			group by grpdescricao;
		end if;
	end if;
end$$
delimiter 

call sp_quantidade_produtos_grupo_vendidos_sexo_estcivil_zona('informatica');
